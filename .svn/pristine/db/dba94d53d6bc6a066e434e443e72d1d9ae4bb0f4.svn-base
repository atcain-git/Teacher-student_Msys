using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Drawing.Printing;
namespace pick
{
    public partial class 教师信息管理 : Form
    {
        public 教师信息管理()
        {
            InitializeComponent();
            dataGridView2.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
        }
        int index = 0;
        int pageSize = 10;     //每页显示行数
        int nMax = 0;         //总记录数
        int pageCount = 0;    //页数＝总记录数/每页显示行数
        int pageCurrent = 1;   //当前页号
        int nCurrent = 0;      //当前记录行
        DataSet ds = new DataSet();
        DataTable dtInfo = new DataTable();
        DataTable dt = new DataTable();
        BindingSource bs = new BindingSource();
        private void 教师信息管理_Load(object sender, EventArgs e)
        {
            dataGridView2.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            printDocument1.PrinterSettings.DefaultPageSettings.Landscape = true;//纸张横向
            printDocument1.DefaultPageSettings.Landscape = true;
          string grade = Grade.Text;
           string major = Major.Text;
           BLL.Teacher b_teacher = new BLL.Teacher();
           DataTable dt = b_teacher.getTeachers(Grade.Text, Major.Text);
            dataGridView2.DataSource = dt;
            bs.DataSource = dt;
            dtInfo = dt.Copy();
            InitDataSet();

            int width = 0;
            for (int i = 0; i < this.dataGridView2.Columns.Count; i++)
            {
                //将每一列都调整为自动适应模式
                this.dataGridView2.AutoResizeColumn(i, DataGridViewAutoSizeColumnMode.AllCellsExceptHeader);
                //记录整个DataGridView的宽度
                width += this.dataGridView2.Columns[i].Width;
            }
            //判断调整后的宽度与原来设定的宽度的关系，如果是调整后的宽度大于原来设定的宽度，
            //则将DataGridView的列自动调整模式设置为显示的列即可，
            //如果是小于原来设定的宽度，将模式改为填充。
            if (width > this.dataGridView2.Size.Width)
            {
                this.dataGridView2.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.DisplayedCells;
            }
            else
            {
                this.dataGridView2.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            }
            //冻结某列 从左开始 0，1，2
            dataGridView2.Columns[1].Frozen = true;
            //内容居中
            dataGridView2.RowsDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
            printDocument1.PrintPage += new PrintPageEventHandler(printdoc_PrintPage);
        }

        private void button10_Click(object sender, EventArgs e)
        {
            string grade = Grade.Text;
            string major = Major.Text;
            BLL.Teacher b_teacher = new BLL.Teacher();
            DataTable dt = b_teacher.getTeachers(grade, major);
            dataGridView2.DataSource = dt;
            bs.DataSource = dt;
            dtInfo = dt.Copy();
            InitDataSet();

            int width = 0;
            for (int i = 0; i < this.dataGridView2.Columns.Count; i++)
            {
                //将每一列都调整为自动适应模式
                this.dataGridView2.AutoResizeColumn(i, DataGridViewAutoSizeColumnMode.AllCellsExceptHeader);
                //记录整个DataGridView的宽度
                width += this.dataGridView2.Columns[i].Width;
            }
            //判断调整后的宽度与原来设定的宽度的关系，如果是调整后的宽度大于原来设定的宽度，
            //则将DataGridView的列自动调整模式设置为显示的列即可，
            //如果是小于原来设定的宽度，将模式改为填充。
            if (width > this.dataGridView2.Size.Width)
            {
                this.dataGridView2.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.DisplayedCells;
            }
            else
            {
                this.dataGridView2.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            }
            //冻结某列 从左开始 0，1，2
            dataGridView2.Columns[1].Frozen = true;
            //内容居中
            dataGridView2.RowsDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
        }

        private void bindingNavigatorMoveFirstItem_Click(object sender, EventArgs e)
        {
            this.bs.MoveFirst();
        }
        private void bindingNavigatorMoveLastItem_Click(object sender, EventArgs e)
        {
            this.bs.MoveLast();
        }
        private void bindingNavigatorMovePreviousItem_Click(object sender, EventArgs e)
        {
            this.bs.MovePrevious();
        }

        private void bindingNavigatorMoveNextItem_Click(object sender, EventArgs e)
        {
            this.bs.MoveNext();
            
        }

        private void bindingNavigator2_RefreshItems(object sender, EventArgs e)
        {
            //bs.DataSource = dataGridView1;
            bindingNavigator2.BindingSource = bs;
            dataGridView2.DataSource = bs;
        }
        void InitDataSet()
        {
            pageSize = 10;      //设置页面行数
            nMax = dtInfo.Rows.Count;
            pageCount = (nMax / pageSize);    //计算出总页数
            if ((nMax % pageSize) > 0)
                pageCount++;
            pageCurrent = 1;    //当前页数从1开始
            nCurrent = 0;       //当前记录数从0开始
            LoadData();
            

        }
        void LoadData()
        {
            int nStartPos = 0;   //当前页面开始记录行
            int nEndPos = 0;     //当前页面结束记录行
            DataTable dtTemp =dtInfo.Clone();   //克隆DataTable结构框架

            if (pageCurrent == pageCount)
            {
                nEndPos = nMax;
            }
            else
            {
                nEndPos = pageSize * pageCurrent;
            }

            nStartPos = nCurrent;
            
            for (int i = nStartPos; i < nEndPos; i++)
            {
                dtTemp.ImportRow(dtInfo.Rows[i]);
                nStartPos++;
            }
            bindingSource1.DataSource = dtTemp;
            bindingNavigator2.BindingSource = bindingSource1;
            dataGridView2.DataSource = bindingSource1;
            bindingNavigatorCountItem.Text = pageCount.ToString();
            bindingNavigatorPositionItem.Text = Convert.ToString(pageCurrent);

        }
        private void toolStripButton1_Click(object sender, EventArgs e)
        {
           
        }
        private void toolStripButton2_Click(object sender, EventArgs e)
        {
            
        }

        private void dataGridView2_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void toolStripButton1_Click_1(object sender, EventArgs e)
        {
           if (pageCurrent >= 0)
            {
                pageCurrent--;
            }
            if (pageCurrent <= 0)
            {
                pageCurrent++;
                MessageBox.Show("已经是第一页");
                return;
            }
            else
            {
                nCurrent = pageSize * (pageCurrent - 1);
            }

            LoadData();
        }

        private void bindingSource1_CurrentChanged(object sender, EventArgs e)
        {

        }

        private void toolStripButton2_Click_1(object sender, EventArgs e)
        {
            pageCurrent++;
            if (pageCurrent > pageCount)
            {
                MessageBox.Show("已经是最后一页，请点击“上一页”查看！");
                return;
            }
            else
            {
                nCurrent = pageSize * (pageCurrent - 1);
            }
            LoadData();
        }

        private void textBox1_MouseClick(object sender, MouseEventArgs e)
        {
            textBox1.Text = "";
        }

        private void button1_Click(object sender, EventArgs e)
        {
            index = 0;
            printPreviewDialog1.Document = printDocument1;

            if (printPreviewDialog1.ShowDialog() == DialogResult.OK)
                printDocument1.Print();

            pageNo = 0;
            index = 0;
        }

        int pageNo = 0;
        void printdoc_PrintPage(object sender, PrintPageEventArgs e)
        {
            int y = 150;
            int x = 100;
            pageNo++;
            Font f = new Font("宋体", 20);
            Font b = new Font("宋体", 20);
            Font c = new Font("黑体", 30);
            e.Graphics.DrawString(string.Format("{0}级{1}专业教师信息", Grade.Text, Major.Text), c, Brushes.Black, 240, 10);
            e.Graphics.DrawString("工号", b, Brushes.Black, x + 5, y - 50);
            e.Graphics.DrawString("姓名", b, Brushes.Black, x + 100, y - 50);
            e.Graphics.DrawString("年级", b, Brushes.Black, x + 220, y - 50);
            e.Graphics.DrawString("性别", b, Brushes.Black, x + 320, y - 50);
            e.Graphics.DrawString("职称", b, Brushes.Black, x + 450, y - 50);
            e.Graphics.DrawString("联系电话", b, Brushes.Black, x + 550, y - 50);
            e.Graphics.DrawString("密码", b, Brushes.Black, x + 750, y - 50);

            Pen blackPen = new Pen(Color.Black, 3);

            for (; index < dtInfo.Rows.Count; index++)
            {
                e.Graphics.DrawString(dtInfo.Rows[index][0].ToString(), f, Brushes.Black, x + 10, y);
                e.Graphics.DrawString(dtInfo.Rows[index][1].ToString(), f, Brushes.Black, x + 100, y);
                e.Graphics.DrawString(dtInfo.Rows[index][2].ToString(), f, Brushes.Black, x + 220, y);
                e.Graphics.DrawString(dtInfo.Rows[index][3].ToString(), f, Brushes.Black, x + 320, y);
                e.Graphics.DrawString(dtInfo.Rows[index][4].ToString(), f, Brushes.Black, x + 450, y);
                e.Graphics.DrawString(dtInfo.Rows[index][5].ToString(), f, Brushes.Black, x + 550, y);
                e.Graphics.DrawString(dtInfo.Rows[index][6].ToString(), f, Brushes.Black, x + 750, y);

                e.Graphics.DrawLine(blackPen, x, y + 70, x + 4 * x + 500, y + 70);
                y += 100;
                if (y > e.PageBounds.Height - 100)
                {
                    index++;
                    e.HasMorePages = true;

                    break;


                }
                e.Graphics.DrawString(string.Format("第{0}页", pageNo), f, Brushes.Black, x + 8 * x, e.PageBounds.Height - 50);
                //e.Graphics.DrawString(string.Format("打印人{0}", pageNo), f, Brushes.Black, x + 5 * x, e.PageBounds.Height - 50);
            }

            if (index >= dtInfo.Rows.Count)
            {
                pageNo = 0;
                index = 0;
            }


        }
    }
}
