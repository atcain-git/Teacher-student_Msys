using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Threading;
using System.Data;
using System.Data.OleDb;
using SQLDAL;
using System.Data.SqlClient;

namespace pick
{
    public partial class 学生信息管理 : Form
    {
        public 学生信息管理()
        {
            InitializeComponent();
        }
        string con = SQLDAL.SqlDbHelper.ConnectionString;
       int pageSize = 1;     //每页显示行数
     int nMax = 0;         //总记录数
       int pageCount = 0;    //页数＝总记录数/每页显示行数
      int pageCurrent = 1;   //当前页号
      int nCurrent = 0;      //当前记录行
        DataSet ds = new DataSet();
      DataTable dtInfo = new DataTable();
       
        DataTable dt = new DataTable();
         BindingSource bs = new BindingSource();
    
        private void 学生信息管理_Load(object sender, EventArgs e)
        {
            
            SqlConnection conn = new SqlConnection(con);
            conn.Open();
            string strSql = "SELECT * FROM student ";
            SqlDataAdapter sda = new SqlDataAdapter(strSql, conn);
            sda.Fill(ds, "ds");
            conn.Close();
            dtInfo = ds.Tables[0];
            InitDataSet();
            string grade = Grade.Text;
            string major = Major.Text;
            BLL.Student b_student = new BLL.Student();
            DataTable dt = b_student.getEnitity(grade,major);
            dataGridView1.DataSource = dt;
            bs.DataSource = dt;
            int width = 0;
            for (int i = 0; i < this.dataGridView1.Columns.Count; i++)
            {
                //将每一列都调整为自动适应模式
                this.dataGridView1.AutoResizeColumn(i, DataGridViewAutoSizeColumnMode.AllCellsExceptHeader);
                //记录整个DataGridView的宽度
                width += this.dataGridView1.Columns[i].Width;
            }
            //判断调整后的宽度与原来设定的宽度的关系，如果是调整后的宽度大于原来设定的宽度，
            //则将DataGridView的列自动调整模式设置为显示的列即可，
            //如果是小于原来设定的宽度，将模式改为填充。
            if (width > this.dataGridView1.Size.Width)
            {
                this.dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.DisplayedCells;
            }
            else
            {
                this.dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            }
            //冻结某列 从左开始 0，1，2
            dataGridView1.Columns[1].Frozen = true;
            //内容居中
            dataGridView1.RowsDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
        }

        private void toolStripMenuItem3_Click(object sender, EventArgs e)
        {
            Thread thread = new Thread(new ThreadStart(exceldata_stu));
            thread.SetApartmentState(ApartmentState.STA);
            thread.Start();
        }
        public void exceldata_stu()
        {
            System.Windows.Forms.OpenFileDialog fd = new OpenFileDialog();
            fd.Filter = "EXCEL文件|*.xlsx|所有文件|*.*";
            if (fd.ShowDialog() == DialogResult.OK)
            {
                string fileName = fd.FileName;
                bind_stu(fileName);
                DataRow dr = null;
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    dr = dt.Rows[i];
                    insertToSql_stu(dr);
                }
                MessageBox.Show("导入成功");
                
            }
        }
        //方法二，利用委托机制实现线程安全;
        private delegate void DelegateDataGridViewWRLUI();
        //打开Excel，把数据放进dataGridView中
        private void bind_stu(string fileName)
        {
            DelegateDataGridViewWRLUI delegateDataGridViewWRLUI = delegate
            {
                //取消跨线程检查，不使用委托的方法，解决“线程间操作无效，从不是创建控件的线程访问它”的问题
                //进行非安全线程访问时，运行环境就不去检验它是否是线程安全的
                //Control.CheckForIllegalCrossThreadCalls = false;//方法一，不建议，转 利用委托机制实现线程安全。

                //office2007版本以上
                string strConn = "Provider=Microsoft.ACE.OLEDB.12.0;" + "Data Source=" + fileName + ";" + "Extended Properties='Excel 8.0; HDR=Yes; IMEX=1'";
                OleDbDataAdapter da = new OleDbDataAdapter("SELECT *  FROM [sheet1$]", strConn);
                DataSet ds = new DataSet();
                try
                {
                    da.Fill(ds);
                    dt = ds.Tables[0];

                }
                catch (Exception err)
                {
                    MessageBox.Show("操作失败！" + err.ToString());
                }
                //textBox1.Text = "" + fileName;
            };
            this.dataGridView1.Invoke(delegateDataGridViewWRLUI);
        }
        private void insertToSql_stu(DataRow dr)
        {
            string password = dr["密码"].ToString();
            string name = dr["姓名"].ToString();
            string sex = dr["性别"].ToString();
            string id = dr["学号"].ToString();
            string grade = dr["年级"].ToString();
            string major = dr["专业"].ToString();
            string Class = dr["班别"].ToString();
            string phone = dr["电话号码"].ToString();
            string email = dr["邮箱地址"].ToString();
            string introduce = dr["自我介绍"].ToString();
            string college = dr["学院"].ToString();
            //string groupID = dr["团队编号"].ToString();
            SqlDbHelper.ExecuteNonQuery(string.Format("insert into student(id,psw,name,sex,college,grade,email,phone,major,introduction,class) values('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}')", id, password, name, sex,college, grade,email, phone,major,introduce,Class));
            
        }

        private void button10_Click(object sender, EventArgs e)
        {
            string grade = Grade.Text;
            string major = Major.Text;
            BLL.Student b_student = new BLL.Student();
            DataTable dt = b_student.getEnitity(grade, major);
            dataGridView1.DataSource = dt;
            int width = 0;
            for (int i = 0; i < this.dataGridView1.Columns.Count; i++)
            {
                //将每一列都调整为自动适应模式
                this.dataGridView1.AutoResizeColumn(i, DataGridViewAutoSizeColumnMode.AllCellsExceptHeader);
                //记录整个DataGridView的宽度
                width += this.dataGridView1.Columns[i].Width;
            }
            //判断调整后的宽度与原来设定的宽度的关系，如果是调整后的宽度大于原来设定的宽度，
            //则将DataGridView的列自动调整模式设置为显示的列即可，
            //如果是小于原来设定的宽度，将模式改为填充。
            if (width > this.dataGridView1.Size.Width)
            {
                this.dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.DisplayedCells;
            }
            else
            {
                this.dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            }
            //冻结某列 从左开始 0，1，2
            dataGridView1.Columns[1].Frozen = true;
            //内容居中
            dataGridView1.RowsDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
        }

        

        private void bindingNavigatorMoveLastItem_Click(object sender, EventArgs e)
        {
            this.bs.MoveLast();
        }

        private void bindingNavigatorMoveFirstItem_Click(object sender, EventArgs e)
        {
            this.bs.MoveFirst();
        }

        private void bindingNavigatorMovePreviousItem_Click(object sender, EventArgs e)
        {
            this.bs.MovePrevious();
        }

        private void bindingNavigatorMoveNextItem_Click(object sender, EventArgs e)
        {
            this.bs.MoveNext();
            
        }

        private void bindingNavigator1_RefreshItems(object sender, EventArgs e)
        {
           // bs.DataSource = dataGridView1;
            bindingNavigator1.BindingSource = bs;
            dataGridView1.DataSource = bs;
        }
        void insert()
        {
            string con = SQLDAL.SqlDbHelper.ConnectionString;
            SqlDataAdapter da = new SqlDataAdapter("insert into student() values ()", con);
            DataSet ds = new DataSet();
            da.Fill(ds);
            
           dataGridView1.DataSource = ds;
           da.Update(ds);

        }
        private void button7_Click(object sender, EventArgs e)
        {
            
        }
         void InitDataSet()
     {
          pageSize = 5;      //设置页面行数
          nMax = dtInfo.Rows.Count;
          pageCount=(nMax/5);    //计算出总页数
          if ((nMax % 5) > 0)
              pageCount++;
         pageCurrent = 1;    //当前页数从1开始
          nCurrent = 0;       //当前记录数从0开始
          LoadData();
     }
      void LoadData()
        {
           int nStartPos = 0;   //当前页面开始记录行
          int nEndPos = 0;     //当前页面结束记录行
          DataTable dtTemp = dtInfo.Clone();   //克隆DataTable结构框架

          if (pageCurrent == pageCount)
           {
             nEndPos = nMax;
            }
           else
           {
                nEndPos = pageSize * pageCurrent;
           }
 
            nStartPos = nCurrent;
          bindingNavigatorCountItem.Text ="/"+ pageCount.ToString();
           bindingNavigatorPositionItem.Text= Convert.ToString(pageCurrent);
    
  
            //从元数据源复制记录行
            for (int i = nStartPos; i < nEndPos; i++)
            {
                dtTemp.ImportRow(dtInfo.Rows[i]);
                nCurrent++;
            }
            bindingSource1.DataSource= dtTemp;
            bindingNavigator1.BindingSource =bindingSource1;
            dataGridView1.DataSource = bindingSource1;
       }
        private void toolStripButton1_Click(object sender, EventArgs e)
        {
            if (pageCurrent >= 0)
            {
                pageCurrent--;
            }
            if (pageCurrent <= 0)
            {
                pageCurrent++;
                MessageBox.Show("已经是第一页");
                return;
            }
            else
            {
                nCurrent = pageSize * (pageCurrent - 1);
            }
            
            LoadData();
        }

        private void toolStripButton2_Click(object sender, EventArgs e)
        {
            pageCurrent++;
               if (pageCurrent > pageCount)
                {
                   MessageBox.Show("已经是最后一页，请点击“上一页”查看！");
                    return;
                 }
                else
                { 
                    nCurrent=pageSize*(pageCurrent-1);
               }
               LoadData();
            }

        
        }

        
           
    
        
    }

